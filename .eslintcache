[{"C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\index.js":"1","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\App.js":"3","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\Redux\\staticStore.js":"4","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\InformationTemp.js":"5","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\NewChart.js":"6","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\ChartT.js":"7","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\BarT.js":"8","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\FusionChart.js":"9","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\Chart2.js":"10","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\Redux\\actions\\staticAction.js":"11","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\Redux\\middleware\\crudMiddleware.js":"12","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\Redux\\reducers\\staticDetailsReducer.js":"13","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\TotalChart.js":"14","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\Fasion2.js":"15","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\Redux\\reducers\\reducerUtils.js":"16","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\Time.js":"17"},{"size":517,"mtime":1614023197570,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1614023197571,"results":"20","hashOfConfig":"19"},{"size":926,"mtime":1614167761087,"results":"21","hashOfConfig":"19"},{"size":467,"mtime":1614023197554,"results":"22","hashOfConfig":"19"},{"size":19535,"mtime":1614243802756,"results":"23","hashOfConfig":"19"},{"size":2123,"mtime":1614023197563,"results":"24","hashOfConfig":"19"},{"size":3457,"mtime":1614258258278,"results":"25","hashOfConfig":"19"},{"size":3158,"mtime":1614258078282,"results":"26","hashOfConfig":"19"},{"size":2785,"mtime":1614198716494,"results":"27","hashOfConfig":"19"},{"size":8938,"mtime":1614113723027,"results":"28","hashOfConfig":"19"},{"size":478,"mtime":1614023197549,"results":"29","hashOfConfig":"19"},{"size":4645,"mtime":1614198716494,"results":"30","hashOfConfig":"19"},{"size":5855,"mtime":1614245339711,"results":"31","hashOfConfig":"19"},{"size":2389,"mtime":1614198716494,"results":"32","hashOfConfig":"19"},{"size":1995,"mtime":1614023197557,"results":"33","hashOfConfig":"19"},{"size":1164,"mtime":1614023197552,"results":"34","hashOfConfig":"19"},{"size":1780,"mtime":1614167754069,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"r06a8g",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\index.js",[],["82","83"],"C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\App.js",["84","85","86","87","88"],"import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport store from './Redux/staticStore'\r\nimport InformationTemp from './components/InformationTemp'\r\nimport Chart2 from './components/Chart2'\r\nimport FusionChart from './components/FusionChart'\r\nimport NewChart from './components/NewChart'\r\nimport ChartT from './components/ChartT'\r\nimport BarT from './components/BarT'\r\n// import Nav from './components/Nav'\r\nimport {Menu} from './components/Time'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container-fluid \">\r\n      <Provider store={store}>\r\n        <InformationTemp></InformationTemp>\r\n      {/* <Menu></Menu> */}\r\n        {/* <Nav></Nav> */}\r\n        <Chart2></Chart2>\r\n        {/* <FusionChart></FusionChart> */}\r\n        {/* <NewChart></NewChart> */}\r\n        {/* <ChartT></ChartT> */}\r\n        {/* <BarT></BarT> */}\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\Redux\\staticStore.js",[],"C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\InformationTemp.js",["89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110"],"import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport './InformationTemp.css';\r\nimport { connect } from 'react-redux';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport iconOne from '../img/iconOne.png'\r\nimport iconTwo from '../img/iconTwo.png';\r\nimport iconThree from '../img/iconThree.png'\r\nimport iconFour from '../img/iconFour.png'\r\nimport { actions } from '../Redux/actions/staticAction'\r\nimport moment from 'moment';\r\nimport { } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Navbar, NavItem, NavDropdown, MenuItem, Nav, Container } from 'react-bootstrap';\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\nimport Pagination from 'react-bootstrap/Pagination'\r\nimport { BsChevronLeft, BsChevronRight } from \"react-icons/bs\";\r\nimport { FcNext, FcPrevious } from \"react-icons/fc\";\r\nimport { indexOf } from '@amcharts/amcharts4/.internal/core/utils/Array';\r\n\r\n\r\n// -------get new date in correct format to filter data----------------------------------------------------\r\n\r\n// const arrTime=['Day','Wee','Mon','Yea']\r\n// \r\n\r\n\r\nlet currentDate = moment().format(\"MM/DD/YYYY\");\r\nlet dateBeforeWeek = moment().subtract(1, 'week').format('MM/DD/YYYY');\r\nlet dateBeforeMonth = moment().subtract(1, 'month').format('MM/DD/YYYY');\r\nlet dateBeforeYear = moment().subtract(1, 'year').format('MM/DD/YYYY')\r\n// --------------------------------------------------------------------------------------------------------------\r\nconst useStyles = () => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)'\r\n    },\r\n    paper: {\r\n        borderRadius: '17px',\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)'\r\n    },\r\n})\r\nexport default withStyles(useStyles)(function Information() {\r\n    const ReducerData = useSelector(state => state.staticDetailsReducer)\r\n    const dispatch = useDispatch()\r\n\r\n// ------------------Functions to scroll the arrows of the date-----------------------------\r\n    function chooseTimeNext() {\r\n        debugger\r\n\r\n        var y = ReducerData.choose\r\n        console.log(y)\r\n        var x = ReducerData.arrTime.indexOf(ReducerData.choose);\r\n\r\n        if (x != 3) {\r\n            x = x + 1\r\n\r\n        }\r\n\r\n        else {\r\n            x = 0\r\n        }\r\n\r\n        dispatch(actions.IsChooseNext(x))\r\n        var filter= ReducerData.arrTime[x]\r\n        switch (filter) {\r\n            case 'Day':   filterByDay()\r\n                break;\r\n            case 'Week':  filterByWeek()\r\n                break;\r\n            case 'Month': filterByMonth()\r\n                break;\r\n            default:      filterByYear()\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function chooseTimePrevious() {\r\n        var y = ReducerData.choose\r\n        console.log(y)\r\n        var x = ReducerData.arrTime.indexOf(ReducerData.choose);\r\n\r\n        if (x != 0) {\r\n            x = x - 1\r\n        }\r\n\r\n        else {\r\n            x = 3\r\n        }\r\n        var filter= ReducerData.arrTime[x]\r\n        switch (filter) {\r\n            case 'Day':  filterByDay()\r\n                break;\r\n            case 'Week': filterByWeek()\r\n                break;\r\n            case 'Month': filterByMonth()\r\n                break;\r\n\r\n            default:      filterByYear()\r\n                break;\r\n        }\r\n        dispatch(actions.IsChoosePrevious(x))\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //  ---filter by: last day,last week,last month,year\r\n    function filterByDay() {\r\n\r\n        let AllTaskData = (ReducerData.AllTask).filter(function (AllTask) {\r\n            const dateTask = AllTask.startDate.split(\"/\")\r\n            const dateFormater = dateTask[1] + \"/\" + dateTask[0] + \"/\" + dateTask[2];\r\n            return (dateFormater == currentDate)\r\n\r\n        })\r\n\r\n        let AllContactData = (ReducerData.AllContact).filter(function (AllContact) {\r\n            const dateContact1 = (AllContact.createDateAndTime)\r\n            let detaContact = moment(dateContact1).format(\"MM/DD/YYYY\");\r\n            return (detaContact == currentDate)\r\n        })\r\n        let AllProjectData = (ReducerData.AllProject).filter(function (AllProject) {\r\n            const dateProject = AllProject.dueDate.split(\"/\")\r\n            const dateFormater = dateProject[1] + \"/\" + dateProject[0] + \"/\" + dateProject[2];\r\n            return (dateFormater == currentDate)\r\n        })\r\n\r\n        let AllPapersData = (ReducerData.AllPapers).filter(function (AllPapers) {\r\n\r\n            const datePaper1 = AllPapers.createdDate\r\n            let detaPaper = moment(datePaper1).format(\"MM/DD/YYYY\");\r\n            return (detaPaper == currentDate)\r\n        })\r\n        dispatch(actions.setTaskStatic(AllTaskData.length))\r\n        dispatch(actions.setContactStatic(AllContactData.length))\r\n        dispatch(actions.setProjectStatic(AllProjectData.length));\r\n        dispatch(actions.setPaperStatic(AllPapersData.length));\r\n        dispatch(actions.ClickFilter(1));\r\n\r\n    }\r\n    function filterByYear() {\r\n        let AllProjectData = (ReducerData.AllProject).filter(function (AllProject) {\r\n            const dateProject = AllProject.dueDate.split(\"/\")\r\n            const dateFormater = dateProject[1] + \"/\" + dateProject[0] + \"/\" + dateProject[2];\r\n            return (new Date(dateFormater) >= new Date(dateBeforeYear))\r\n\r\n        })\r\n        let AllPapersData = (ReducerData.AllPapers).filter(function (AllPapers) {\r\n\r\n            const datePaper1 = AllPapers.createdDate\r\n            let detaPaper = moment(datePaper1).format(\"MM/DD/YYYY\");\r\n            // const dateFormater = detaPaper[1] + \"/\" + detaPaper[0] + \"/\" + detaPaper[2];\r\n            return (new Date(detaPaper) >= new Date(dateBeforeYear))\r\n\r\n        })\r\n        let AllTaskData = (ReducerData.AllTask).filter(function (AllTask) {\r\n\r\n            const dateTask = AllTask.startDate.split(\"/\")\r\n            const dateFormater = dateTask[1] + \"/\" + dateTask[0] + \"/\" + dateTask[2];\r\n            return (new Date(dateFormater) >= new Date(dateBeforeYear))\r\n\r\n        })\r\n        let AllContactData = (ReducerData.AllContact).filter(function (AllContact) {\r\n            const dateContact1 = (AllContact.createDateAndTime)\r\n\r\n            let detaContact = moment(dateContact1).format(\"MM/DD/YYYY\");\r\n            return (new Date(detaContact) >= new Date(dateBeforeYear))\r\n\r\n        })\r\n        dispatch(actions.setContactStatic(AllContactData.length))\r\n        dispatch(actions.setTaskStatic(AllTaskData.length))\r\n        dispatch(actions.setProjectStatic(AllProjectData.length));\r\n        dispatch(actions.setPaperStatic(AllPapersData.length));\r\n        dispatch(actions.ClickFilter(1));\r\n\r\n    }\r\n    function filterByWeek() {\r\n        let AllProjectData = (ReducerData.AllProject).filter(function (AllProject) {\r\n            const dateProject = AllProject.dueDate.split(\"/\")\r\n            const dateFormater = dateProject[1] + \"/\" + dateProject[0] + \"/\" + dateProject[2];\r\n            return (new Date(dateFormater) >= new Date(dateBeforeWeek))\r\n        })\r\n        let AllPapersData = (ReducerData.AllPapers).filter(function (AllPapers) {\r\n\r\n            const datePaper1 = AllPapers.createdDate\r\n            let detaPaper = moment(datePaper1).format(\"MM/DD/YYYY\");\r\n            // const dateFormater = detaPaper[1] + \"/\" + detaPaper[0] + \"/\" + detaPaper[2];\r\n            return (new Date(detaPaper) >= new Date(dateBeforeWeek))\r\n\r\n        })\r\n\r\n        let AllTaskData = (ReducerData.AllTask).filter(function (AllTask) {\r\n            const dateTask = AllTask.startDate.split(\"/\")\r\n            const dateFormater = dateTask[1] + \"/\" + dateTask[0] + \"/\" + dateTask[2];\r\n            return (new Date(dateFormater) >= new Date(dateBeforeWeek))\r\n\r\n        })\r\n        let AllContactData = (ReducerData.AllContact).filter(function (AllContact) {\r\n            const dateContact1 = (AllContact.createDateAndTime)\r\n            let detaContact = moment(dateContact1).format(\"MM/DD/YYYY\");\r\n            return (new Date(detaContact) >= new Date(dateBeforeWeek))\r\n\r\n        })\r\n        dispatch(actions.setProjectStatic(AllProjectData.length));\r\n        dispatch(actions.setPaperStatic(AllPapersData.length));\r\n        dispatch(actions.setContactStatic(AllContactData.length))\r\n        dispatch(actions.setTaskStatic(AllTaskData.length))\r\n        dispatch(actions.ClickFilter(1));\r\n    }\r\n    function filterByMonth() {\r\n        let AllProjectData = (ReducerData.AllProject).filter(function (AllProject) {\r\n            const dateProject = AllProject.dueDate.split(\"/\")\r\n            const dateFormater = dateProject[1] + \"/\" + dateProject[0] + \"/\" + dateProject[2];\r\n            return (new Date(dateFormater) >= new Date(dateBeforeMonth))\r\n        })\r\n        let AllPapersData = (ReducerData.AllPapers).filter(function (AllPapers) {\r\n\r\n            const datePaper1 = AllPapers.createdDate\r\n            let detaPaper = moment(datePaper1).format(\"MM/DD/YYYY\");\r\n            // const dateFormater = detaPaper[1] + \"/\" + detaPaper[0] + \"/\" + detaPaper[2];\r\n            return (new Date(detaPaper) >= new Date(dateBeforeMonth))\r\n\r\n        })\r\n        let AllTaskData = (ReducerData.AllTask).filter(function (AllTask) {\r\n            const dateTask = AllTask.startDate.split(\"/\")\r\n            const dateFormater = dateTask[1] + \"/\" + dateTask[0] + \"/\" + dateTask[2];\r\n            return (new Date(dateFormater) >= new Date(dateBeforeMonth))\r\n\r\n        })\r\n        let AllContactData = (ReducerData.AllContact).filter(function (AllContact) {\r\n            const dateContact1 = (AllContact.createDateAndTime)\r\n            let detaContact = moment(dateContact1).format(\"MM/DD/YYYY\");\r\n            return (new Date(detaContact) >= new Date(dateBeforeMonth))\r\n\r\n        })\r\n\r\n        dispatch(actions.setProjectStatic(AllProjectData.length));\r\n        dispatch(actions.setPaperStatic(AllPapersData.length));\r\n        dispatch(actions.setContactStatic(AllContactData.length))\r\n        dispatch(actions.setTaskStatic(AllTaskData.length))\r\n        dispatch(actions.ClickFilter(1));\r\n    }\r\n\r\n\r\n \r\n    return (\r\n        <div className=\"container-fluid mt-5\">\r\n            <div className=\"row pb-5\" style={{ marginRight: '12%', marginLeft: '12%' }} >\r\n                <div className=\"col-3 \" style={{ fontSize: \"30px\", font: \"normal normal bold 18px/27px Roboto\", marginBottom: \"15px\" }}>\r\n                    leads information\r\n                </div>\r\n                <div className=\"col-3.5\" style={{ direction: \"rtl\" }}>\r\n                    <div className=\"col-3.5\" style={{ direction: \"rtl\" }}>\r\n                    </div></div>‏\r\n             <Grid container spacing={4}>\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Paper className=\"paperOne\" style={{ cursor: 'pointer', padding: 10, borderRadius: '14px', background: '#FFFDFA', border: '2px Solid #F7B500', color: '#F7B500' }}>\r\n                            <div className=\"ml-2\" style={{ textAlign: 'start', fontWeight: 'bolder' }}>\r\n                                Total Contacts {\" \"}\r\n                            </div>\r\n                            <div class=\"row justify-content-between\">\r\n                                <div className=\"ml-2\" >\r\n                                    <div class=\"col-6 ml-2\">\r\n                                        <h5 style={{ fontWeight: 'bolder' }}>\r\n                                            {ReducerData.leaderStatic.sumContacts ? ReducerData.leaderStatic.sumContacts : \"0\"}</h5>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-4\" >\r\n                                    <Avatar style={{ background: '#FFFFFF', boxShadow: '0px 0px 20px #00000033' }}>\r\n                                        <img src={iconOne} style={{ height: '50%' }} />\r\n                                    </Avatar>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\" style={{ margin: '1px', fontWeight: 'bolder' }}>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={3}>\r\n                        <Paper className=\"paperTwo\" onClick={() => { window.location.assign('https://papers.dev.leader.codes/admin/ruth109476@gmail.com') }} style={{ padding: 10, background: '#ECFAFA', cursor: 'pointer', border: '2px Solid #01DCD1', color: '#01DCD1', borderRadius: '14px' }}>\r\n                            <div className=\"ml-2\" style={{ textAlign: 'start', fontWeight: 'bolder' }}>\r\n                                Total Papers {\" \"}\r\n                            </div>\r\n                            <div class=\"row justify-content-between\">\r\n                                <div className=\"ml-2\" >\r\n                                    <div class=\"col-6 ml-2\">\r\n                                        <h5> {ReducerData.leaderStatic.sumPapers ? ReducerData.leaderStatic.sumPapers : \"0\"}</h5>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-4\" >\r\n                                    <Avatar style={{ background: '#FFFFFF', boxShadow: '0px 0px 20px #00000033' }}>\r\n                                        <img src={iconTwo} style={{ height: '50%' }} />\r\n                                    </Avatar>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\" style={{ margin: '1px' }}>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}  >\r\n                        <Paper className=\"paperThree\" style={{ cursor: 'pointer', padding: 10, background: '#F2F3FF', border: '2px Solid #6772DE', color: '#6772DE', borderRadius: '14px' }}>\r\n                            <div className=\"ml-2\" style={{ textAlign: 'start', fontWeight: 'bolder' }}>\r\n                                Total Projects {\" \"}\r\n                            </div>\r\n                            <div class=\"row justify-content-between\">\r\n                                <div className=\"ml-2\">\r\n                                    <div class=\"col-6 ml-2\">\r\n                                        <h5>\r\n                                            {ReducerData.leaderStatic.sumProjects ? ReducerData.leaderStatic.sumProjects : \"0\"}\r\n                                        </h5>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-4\">\r\n                                    <Avatar style={{ background: '#FFFFFF', boxShadow: ' 0px 0px 20px #00000033' }}>\r\n                                        <img src={iconThree} />\r\n                                    </Avatar>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\" style={{ margin: '1px' }}>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={3}  >\r\n                        <Paper className=\"paperFour\" style={{ padding: 10, background: '#FFF5FD', border: '2px Solid #FD51DB', color: '#FD51DB', borderRadius: '14px', cursor: 'pointer' }}>\r\n                            <div className=\"cardFor\" className=\"ml-2 cardFor\" style={{ textAlign: 'start', fontWeight: 'bolder' }}>\r\n                                Total Tasks  {\" \"}\r\n                            </div>\r\n                            <div class=\"row justify-content-between\">\r\n                                <div class=\" ml-2\">\r\n                                    <div className=\" col-6 ml-2\" >\r\n                                        <h5>{ReducerData.leaderStatic.sumTasks ? ReducerData.leaderStatic.sumTasks : \"0\"}\r\n                                        </h5>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-4\" >\r\n                                    <Avatar style={{ background: '#FFFFFF', boxShadow: '0px 0px 20px #00000033' }}>\r\n                                        <img src={iconFour} />\r\n                                    </Avatar>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\" style={{ margin: '1px' }}>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </div>\r\n            <Container>\r\n                <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\r\n                    <Navbar.Brand href=\"#\">Contacts</Navbar.Brand>\r\n                    <Navbar.Brand href=\"#\">Papers</Navbar.Brand>\r\n                    <Navbar.Brand href=\"#\">Projects</Navbar.Brand>\r\n                    <Navbar.Brand href=\"#\">Tasks</Navbar.Brand>\r\n                    {/* <div class=\"container\"> \r\n    <BsChevronLeft></BsChevronLeft>\r\n    <BsChevronRight></BsChevronRight>\r\n    </div> */}\r\n                    <div class=\"container\" style={{ paddingLeft: \"62%\" }}>\r\n\r\n                        <FcPrevious onClick={(e) => chooseTimePrevious(e)}></FcPrevious>\r\n                       \r\n                        {ReducerData.choose}\r\n\r\n                        <FcNext onClick={(e) => chooseTimeNext(e)}></FcNext>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div style={{ paddingLeft: \"60%\" }}>\r\n                        <DropdownButton id=\"dropdown-basic-button\" title=\"Choose Time\">\r\n                            <Dropdown.Item href=\"#/action-1\">Day</Dropdown.Item>\r\n                            <Dropdown.Item href=\"#/action-2\">Week</Dropdown.Item>\r\n                            <Dropdown.Item href=\"#/action-3\">Month</Dropdown.Item>\r\n                            <Dropdown.Item href=\"#/action-3\">Year</Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </div>\r\n                </Navbar>\r\n            </Container>\r\n            {/* ----------------------------filter by: day ,week, month----------------------------------------------------- */}\r\n\r\n\r\n\r\n            <div>\r\n                <div class=\"row\" style={{ direction: \"rtl\", paddingLeft: \"30%\" }}>\r\n                    ‎\r\n                    {/* <Button variant=\"contained\" style={{ background: \"lightslategrey\", marginRight: \"520px\", height: \"20px\", font: \"normal normal 600 14px/66px SF Pro Display\" }} color=\"primary\" onClick={filterByYear}>Year</Button>\r\n                    <Button variant=\"contained\" style={{ background: \"lightslategrey\", marginRight: \"3px\", height: \"20px\", font: \"normal normal 600 14px/66px SF Pro Display\" }} color=\"primary\" onClick={filterByMonth}>Month</Button>\r\n                    <Button variant=\"contained\" style={{ background: \"lightslategrey\", marginRight: \"3px\", height: \"20px\", font: \"normal normal 600 14px/66px SF Pro Display\" }} color=\"primary\" onClick={filterByWeek}>Week</Button>\r\n                    <Button variant=\"contained\" style={{ background: \"lightslategrey\", marginRight: \"3px\", height: \"20px\", font: \"normal normal 600 14px/66px SF Pro Display\" }} color=\"primary\" onClick={filterByDay}>Day</Button> */}\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\NewChart.js",["111"],"import React, { useRef, useLayoutEffect } from 'react';\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nexport default function App(props) {\r\n    const UpdatedData = useSelector(state => state.staticDetailsReducer);\r\n\r\n    const chart = useRef(null);\r\n\r\n    useLayoutEffect(() => {\r\n        let x = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n\r\n        x.paddingRight = 20;\r\n        //    let data= [\r\n        //         UpdatedData.leaderStatic.sumContacts,\r\n        //         UpdatedData.leaderStatic.sumPapers,\r\n        //         UpdatedData.leaderStatic.sumProjects,\r\n        //         UpdatedData.leaderStatic.sumTasks,\r\n        //     ]\r\n        let data = []\r\n        let visits = 10;\r\n\r\n        for (let i = 1; i < 366; i++) {\r\n            visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\r\n            data.push({ date: new Date(2018, 0, i), name: \"name\" + i, value: visits });\r\n        }\r\n\r\n        x.data = data;\r\n\r\n        let dateAxis = x.xAxes.push(new am4charts.DateAxis());\r\n        dateAxis.renderer.grid.template.location = 0;\r\n        // let dateAxis =[\"contact\",\"papers\",\"projects\",\"tasks\"]\r\n\r\n        let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\r\n        valueAxis.tooltip.disabled = true;\r\n        valueAxis.renderer.minWidth = 35;\r\n\r\n        let series = x.series.push(new am4charts.LineSeries());\r\n        series.dataFields.dateX = \"date\";\r\n        series.dataFields.valueY = \"value\";\r\n        series.tooltipText = \"{valueY.value}\";\r\n        x.cursor = new am4charts.XYCursor();\r\n\r\n        let scrollbarX = new am4charts.XYChartScrollbar();\r\n        scrollbarX.series.push(series);\r\n        x.scrollbarX = scrollbarX;\r\n\r\n        chart.current = x;\r\n\r\n        return () => {\r\n            x.dispose();\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\r\n    );\r\n}\r\n","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\ChartT.js",["112","113"],"import React from 'react';\r\nimport moment from 'moment';\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport default function ApexChart() {\r\n  const UpdatedData = useSelector(state => state.staticDetailsReducer);\r\n\r\n\r\n\r\n  const state = {\r\n\r\n    series: [\r\n\r\n      {\r\n        name: \"\",\r\n        data: [UpdatedData.contacts[1], UpdatedData.contacts[2], UpdatedData.contacts[3], UpdatedData.contacts[4], UpdatedData.contacts[5], UpdatedData.contacts[6], UpdatedData.contacts[7], UpdatedData.contacts[8], UpdatedData.contacts[9], UpdatedData.contacts[10], UpdatedData.contacts[11], UpdatedData.contacts[12]]\r\n      },\r\n      {\r\n        name: \"\",\r\n        data: [UpdatedData.papers[1], UpdatedData.papers[2], UpdatedData.papers[3], UpdatedData.papers[4], UpdatedData.papers[5], UpdatedData.papers[6], UpdatedData.papers[7], UpdatedData.papers[8], UpdatedData.papers[9], UpdatedData.papers[10], UpdatedData.papers[11], UpdatedData.papers[12]]\r\n      },\r\n\r\n      {\r\n        name: \"\",\r\n        data: [UpdatedData.projects[1], UpdatedData.projects[2], UpdatedData.projects[3], UpdatedData.projects[4], UpdatedData.projects[5], UpdatedData.projects[6], UpdatedData.projects[7], UpdatedData.projects[8], UpdatedData.projects[9], UpdatedData.projects[10], UpdatedData.projects[11], UpdatedData.projects[12]]\r\n      },\r\n      {\r\n        name: \"\",\r\n        data: [UpdatedData.tasks[1], UpdatedData.tasks[2], UpdatedData.tasks[3], UpdatedData.tasks[4], UpdatedData.tasks[5], UpdatedData.tasks[6], UpdatedData.tasks[7], UpdatedData.tasks[8], UpdatedData.tasks[9], UpdatedData.tasks[10], UpdatedData.tasks[11], UpdatedData.tasks[12]]\r\n      }\r\n\r\n    ],\r\n    options: {\r\n      xaxis: {\r\n        type: 'category',\r\n        categories: [],\r\n        labels: {\r\n            show: false}\r\n        },\r\n      chart: {\r\n        background: '#fff',\r\n        height: 350,\r\n        // type: 'area'\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        curve: 'smooth',\r\n        // lineCap: 'butt',\r\n\r\n        width: 3,\r\n\r\n        },\r\n        grid: {\r\n          show: true,\r\n          borderColor: '#90A4AE',\r\n          strokeDashArray: 0,\r\n          position: 'back',\r\n         \r\n          yaxis: {\r\n              lines: {\r\n                  show: false\r\n              }\r\n          },  \r\n          row: {\r\n              colors: undefined,\r\n              opacity: 0.5\r\n          },  \r\n          column: {\r\n              colors: undefined,\r\n              opacity: 0.5\r\n          },  \r\n          padding: {\r\n              top: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              left: 0\r\n          },  \r\n      },\r\n\r\n      xaxis: {\r\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May',\r\n          'Jun', 'jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n          labels: {\r\n            show: false}\r\n      },\r\n      labels: ['contacts', 'papers', 'projects ', 'tasks'],\r\n      legend: {\r\n\r\n      },\r\n\r\n\r\n      fill: {\r\n        colors: undefined,\r\n        opacity: 0.9,\r\n        type: 'gradient',\r\n        gradient: {\r\n          shade: 'light',\r\n          type: \"diagonal1\",\r\n\r\n\r\n        },\r\n      },\r\n\r\n      markers: {\r\n        size: 0,\r\n        hover: {\r\n          sizeOffset: 6\r\n        }\r\n      },\r\n\r\n    },\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n\r\n    <div id=\"chart\">\r\n      <ReactApexChart options={state.options} series={state.series} type=\"line\" width={420} />\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\BarT.js",[],"C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\FusionChart.js",["114"],"\r\nimport React from \"react\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport charts from \"fusioncharts/fusioncharts.charts\";\r\nimport ReactFusioncharts from \"react-fusioncharts\";\r\nimport Fasion2 from './Fasion2'\r\nimport TotalChart from './TotalChart'\r\nimport { useSelector } from 'react-redux'\r\n\r\ncharts(FusionCharts);\r\n\r\nexport default function MyComponent() {\r\n    // colors: [' rgb(247, 181, 0)', 'rgb(1, 220, 209)', 'rgb(103, 114, 222)', 'rgb(253, 81, 219)'],\r\n\r\n    const rgbToHex = (r, g, b) => '#' + [r, g, b].map(x => {\r\n        const hex = x.toString(16)\r\n        return hex.length === 1 ? '0' + hex : hex\r\n    }).join('')\r\n    //   debugger\r\n    console.log(rgbToHex(247, 181, 0)); // '#f7b500'\r\n    console.log(rgbToHex(1, 220, 209)); // \"#01dcd1\"\r\n    console.log(rgbToHex(103, 114, 222)); // \"#6772de\"\r\n    console.log(rgbToHex(253, 81, 219)); // \"#fd51db\"\r\n    const UpdatedData = useSelector(state => state.staticDetailsReducer);\r\n    const dataSource = {\r\n        type: 'column3d',\r\n        // renderAt: 'chart-container',\r\n        width: '700',\r\n        height: '250',\r\n        // dataFormat: 'json',\r\n        \"theme\": \" \",\r\n        dataSource: {\r\n            \"chart\": {\r\n                bgColor: \"#ff0000\",\r\n                canvasBgColor: \"#ff0000\",\r\n                // \"bgImage\": \"https://upload.wikimedia.org/wikipedia/commons/7/79/Misc_fruit.jpg\"\r\n            },\r\n        },\r\n        fill: {\r\n            type: 'image',\r\n            image: {\r\n                src: ['https://upload.wikimedia.org/wikipedia/commons/7/79/Misc_fruit.jpg'],\r\n                width: undefined,  // optional\r\n                height: undefined  //optional\r\n            }\r\n        },\r\n        data: [\r\n            {\r\n                label: \"contacts\",\r\n                value: UpdatedData.leaderStatic.sumContacts,\r\n                \"color\": '#f7b500',\r\n\r\n            },\r\n            {\r\n                label: \"papers\",\r\n                value: UpdatedData.leaderStatic.sumPapers,\r\n                \"color\": \"#01dcd1\"\r\n            },\r\n            {\r\n                label: \"projects\",\r\n                value: UpdatedData.leaderStatic.sumProjects,\r\n                \"color\": \"#6772de\"\r\n\r\n\r\n            },\r\n            {\r\n                label: \"tasks\",\r\n                value: UpdatedData.leaderStatic.sumTasks,\r\n                \"color\": \"#fd51db\"\r\n\r\n            }\r\n\r\n\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <div id=\"c\">\r\n                <ReactFusioncharts\r\n                    type=\"column3d\"\r\n                    width=\"40%\"\r\n                    height=\"\r\n                210%\"\r\n                    dataSource={dataSource}\r\n                />\r\n                {/* <Fasion2></Fasion2> */}\r\n                <TotalChart></TotalChart>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\Chart2.js",["115","116","117","118"],"import React, { useEffect } from 'react';\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport Chart from \"react-apexcharts\";\r\nimport { useSelector } from 'react-redux';\r\n// import Mdb from './Mdbreact'\r\nimport BarT from './BarT'\r\nimport TotalChart from './TotalChart'\r\nimport ChartT from './ChartT'\r\n\r\n\r\n\r\nexport default function TryChart() {\r\n    const UpdatedData = useSelector(state => state.staticDetailsReducer);\r\n\r\n\r\n\r\n   \r\n    const state = {\r\n        option1: {\r\n            chart: {\r\n\r\n                type: 'area',\r\n                stacked: false,\r\n                height: 350,\r\n                zoom: {\r\n                    enabled: false\r\n                },\r\n            },\r\n            tooltip: {\r\n                shared: true\r\n            },\r\n            דstroke: {\r\n                curve: 'smooth',\r\n            },\r\n            dataLabels: {\r\n                enabled: false\r\n            },\r\n            colors: ['rgb(247, 181, 0)', 'rgb(1, 220, 209)', 'rgb(103, 114, 222)', 'rgb(253, 81, 219)'],\r\n            xaxis: {\r\n                categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May',\r\n                    'Jun', 'jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n            },\r\n            // yaxis: {\r\n            //     labels: {\r\n            //         style: {\r\n            //             colors: '#8e8da4',\r\n            //         },\r\n            //         offsetX: 0,\r\n            //         formatter: function (val) {\r\n            //             return (val / 1000000).toFixed(2);\r\n            //         },\r\n            //     },\r\n            //     axisBorder: {\r\n            //         show: false,\r\n            //     },\r\n            //     axisTicks: {\r\n            //         show: false\r\n            //     }\r\n            // },\r\n            //the plase of labels\r\n            legend: {\r\n                horizontalAlign: \"left\",\r\n                offsetX: 40\r\n            }\r\n        },\r\n        series1: [\r\n\r\n            {\r\n                name: \"contacts\",\r\n                data: [UpdatedData.contacts[1], UpdatedData.contacts[2], UpdatedData.contacts[3], UpdatedData.contacts[4], UpdatedData.contacts[5], UpdatedData.contacts[6], UpdatedData.contacts[7], UpdatedData.contacts[8], UpdatedData.contacts[9], UpdatedData.contacts[10], UpdatedData.contacts[11], UpdatedData.contacts[12]]\r\n            },\r\n            {\r\n                name: \"papers\",\r\n                data: [UpdatedData.papers[1], UpdatedData.papers[2], UpdatedData.papers[3], UpdatedData.papers[4], UpdatedData.papers[5], UpdatedData.papers[6], UpdatedData.papers[7], UpdatedData.papers[8], UpdatedData.papers[9], UpdatedData.papers[10], UpdatedData.papers[11], UpdatedData.papers[12]]\r\n            },\r\n\r\n            {\r\n                name: \"projects\",\r\n                data: [UpdatedData.projects[1], UpdatedData.projects[2], UpdatedData.projects[3], UpdatedData.projects[4], UpdatedData.projects[5], UpdatedData.projects[6], UpdatedData.projects[7], UpdatedData.projects[8], UpdatedData.projects[9], UpdatedData.projects[10], UpdatedData.projects[11], UpdatedData.projects[12]]\r\n            },\r\n            {\r\n                name: \"tasks\",\r\n                data: [UpdatedData.tasks[1], UpdatedData.tasks[2], UpdatedData.tasks[3], UpdatedData.tasks[4], UpdatedData.tasks[5], UpdatedData.tasks[6], UpdatedData.tasks[7], UpdatedData.tasks[8], UpdatedData.tasks[9], UpdatedData.tasks[10], UpdatedData.tasks[11], UpdatedData.tasks[12]]\r\n            }\r\n\r\n        ],\r\n        option2: {\r\n\r\n            //%%%%%%\r\n            dataLabels: {\r\n                enabled: true\r\n            },\r\n\r\n            labels: ['contacts', 'papers', 'project', 'tasks'],\r\n            //change color\r\n            colors: [' rgb(247, 181, 0)', 'rgb(1, 220, 209)', 'rgb(103, 114, 222)', 'rgb(253, 81, 219)'],\r\n            //Spacing\r\n            stroke: {\r\n                width: [2, 7, 2],\r\n                curve: 'straight',\r\n                dashArray: [0, 8, 5]\r\n            },\r\n        },\r\n        series2: [UpdatedData.leaderStatic.sumContacts,\r\n        UpdatedData.leaderStatic.sumPapers,\r\n        UpdatedData.leaderStatic.sumProjects,\r\n        UpdatedData.leaderStatic.sumTasks],\r\n\r\n        series: [{\r\n            name: \" \",\r\n            data: [UpdatedData.leaderStatic.sumContacts,\r\n            UpdatedData.leaderStatic.sumPapers,\r\n            UpdatedData.leaderStatic.sumProjects,\r\n            UpdatedData.leaderStatic.sumTasks],\r\n        }],\r\n        options:\r\n        {\r\n            bar: {\r\n                borderRadius: 6,\r\n                columnWidth: '15%',\r\n                distributed: true,\r\n              },\r\n            labels: ['contacts', 'papers', 'projects ', 'tasks'],\r\n\r\n            chart: {\r\n                type: 'line',\r\n                zoom: {\r\n                    enabled: false\r\n                },\r\n\r\n                backgroundColor: [\r\n                    'rgb(247, 181, 0)', 'rgb(1, 220, 209)', 'rgb(103, 114, 222)', 'rgb(253, 81, 219)'\r\n                ],\r\n            },\r\n            //    colors: tooltip.marker.fillColors=['rgb(1, 220, 209)', 'rgb(103, 114)','rgb(1, 220, 209)', 'rgb(103, 114)'],\r\n            // colors: [function ({ value, seriesIndex, w }) {\r\n            //     return 'rgb(247, 181, 0)'\r\n            // }, function ({ value, seriesIndex, w }) {\r\n            //     return 'rgb(0, 181, 0)'\r\n            // }, function ({ value, seriesIndex, w }) {\r\n            //     return 'rgb(0, 0, 0)'\r\n            // }, function ({ value, seriesIndex, w }) {\r\n            //     return 'rgb(247, 6, 0)'\r\n            // },\r\n            // ],\r\n            // colors: ['', 'rgb(1, 220, 209)', 'rgb(103, 114)'],\r\n            dataLabels: {\r\n                enabled: false\r\n            },\r\n            stroke: {\r\n                width: [5, 7, 5],\r\n                curve: 'straight',\r\n                dashArray: [0, 8, 5]\r\n            },\r\n            legend: {\r\n                tooltipHoverFormatter: function (val, opts) {\r\n                    return val + ' - ' + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + ''\r\n                }\r\n            },\r\n\r\n            tooltip: {\r\n                y: [\r\n                    {\r\n                        title: {\r\n                            formatter: function (val) {\r\n                                return val;\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        title: {\r\n                            formatter: function (val) {\r\n                                return val + \" per session\"\r\n                            }\r\n                        }\r\n                    },\r\n                ]\r\n            },\r\n        },\r\n    }\r\n    return (\r\n        <>\r\n            {UpdatedData.isClicked === 0 ?\r\n                <div className=\"container\" >\r\n                    <div className=\"row\" style={{ paddingTop: \"5%\" }}  >\r\n                        <div className=\"col-sm-4\" style={{ marginLeft: \"-70px\" }}>\r\n                            {/* <ReactApexChart options={state.options} series={state.series} type=\"bar\" width=\"420\" /> */}\r\n                            <BarT></BarT>\r\n                           \r\n                            {/* <Mdb ></Mdb> */}\r\n                        </div>\r\n                        <div className=\"col-md-2\" style={{marginLeft:\"90px\"}}>\r\n                            {/* <Chart options={state.option2} series={state.series2} type=\"donut\" width=\"460\" height=\"250\" /> */}\r\n                            <TotalChart></TotalChart>\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-3\" style={{ marginLeft: \"150px\" }}>\r\n                            {/* < ReactApexChart options={state.option1} series={state.series1} type=\"area\" width=\"400\" height=\"270\" /> */}\r\n                            <ChartT></ChartT>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className=\"container\" >\r\n\r\n                    <div className=\"row\" style={{ paddingTop: \"5%\" }}  >\r\n                        <div className=\"col-sm-4\" style={{ marginLeft: \"80px\" }} >\r\n                            {/* <Mdb ></Mdb> */}\r\n                            <BarT></BarT>\r\n                            {/* <div className=\"col-sm-7\" style={{ marginLeft: \"50px\" }} > */}\r\n                            {/* <ReactApexChart options={state.options} series={state.series} type=\"bar\" width=\"420\" /> */}\r\n                        </div>\r\n                        {/* <div className=\"col-md-3\" style={{ marginLeft: \"-90px\" }}> */} \r\n                        <div className=\"col-md-3\" style={{ marginLeft: \"120px\" }}>\r\n                            {/* <Chart options={state.option2} series={state.series2} type=\"donut\" width=\"460\" height=\"250\" /> */}\r\n                            <TotalChart></TotalChart>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\Redux\\actions\\staticAction.js",[],"C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\Redux\\middleware\\crudMiddleware.js",["119"],"import { actions } from '../actions/staticAction'\r\n\r\n// ---------------A function that extracts the jwt from the cookies----------------\r\nexport const getCookie = (c_name) => {\r\n  if (document.cookie.length > 0) {\r\n    let c_start = document.cookie.indexOf(c_name + '=');\r\n    if (c_start !== -1) {\r\n      c_start = c_start + c_name.length + 1;\r\n      let c_end = document.cookie.indexOf(';', c_start);\r\n      if (c_end === -1) {\r\n        c_end = document.cookie.length;\r\n      }\r\n      return unescape(document.cookie.substring(c_start, c_end));\r\n    }\r\n  }\r\n  return '';\r\n};\r\nexport const getStaticData = ({ dispatch, getState }) => next => action => {\r\n  // with this type client enter to application:INIT_DATA\r\n  if (action.type === 'INIT_DATA') {\r\n    let jwt = getCookie('jwt');\r\n    //  fetch to get sum of projects for user-----------------\r\n    fetch('https://reacthub.dev.leader.codes/api/renana-il/getAllProjectsForUser', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJIZXNJaFlXaVU2Z1A3M1NkMHRXaDJZVzA4ZFkyIiwiZW1haWwiOiJyZW5hbmFAbGVhZGVyLmNvZGVzIiwiaWF0IjoxNjA3NTkxOTI5fQ.U2FQ7I4qBXW9DF-SVJqxKiWgVs5tjSo06pyvmuwzCFU\",\r\n        //    Authorization: jwt,\r\n      },\r\n    })\r\n      .then((data) => data.json())\r\n      .then((data) => {\r\n        \r\n        //all data for project\r\n        let projectData = data.userProjectsList\r\n        //only sumProject\r\n        if(projectData!=null)\r\n    {    let sumProject = data.countProjectsForUser\r\n        dispatch(actions.setProjectStatic(sumProject));\r\n        dispatch(actions.setProjectData(projectData));\r\n        dispatch(actions.setProjectChart(projectData));\r\n        console.log(data)}\r\n      })\r\n    // fetch to get sum tasks for user-------------\r\n    fetch('https://reacthub.dev.leader.codes/api/renana-il/getAllTasksForUser', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJIZXNJaFlXaVU2Z1A3M1NkMHRXaDJZVzA4ZFkyIiwiZW1haWwiOiJyZW5hbmFAbGVhZGVyLmNvZGVzIiwiaWF0IjoxNjA3NTkxOTI5fQ.U2FQ7I4qBXW9DF-SVJqxKiWgVs5tjSo06pyvmuwzCFU\",\r\n        //     Authorization: jwt,\r\n      },\r\n    })\r\n      .then((data) => data.json())\r\n      .then((data) => {\r\n        //all data for project\r\n        let taskData = data.userTasksList\r\n        //only sumTask\r\n        if(taskData!=null)\r\n        {let sumTask = (data.countTasksForUser)\r\n        dispatch(actions.setTaskStatic(sumTask));\r\n        dispatch(actions.setTaskData(taskData));\r\n        dispatch(actions.setTaskChart(taskData));\r\n        console.log(data)}\r\n      })\r\n    //  fetch to get sum of papers for user-----------------\r\n    fetch('https://papers.dev.leader.codes/api/ruth109476@gmail.com/getAllQuote', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJEWWMzVlVtRUhTY3FhWkJ3MzAwbHY4OWZuYTgyIiwiZW1haWwiOiJydXRoMTA5NDc2QGdtYWlsLmNvbSIsImlhdCI6MTYxMTcyNjEzN30.sDgXmAvDj3JirPgU5AksbPVMdtxHVIAU9rgTFAeAluE\",\r\n        //     Authorization: jwt,\r\n      },\r\n    })\r\n      .then((data) => data.json())\r\n      .then((data) => {\r\n        // let sumPapers = (data.quotes.length)\r\n        if(data.quotes!=null){\r\n          debugger\r\n        let sumPapers = (data.quotes.length)\r\n        let d = data.quotes\r\n        dispatch(actions.setPaperStatic(sumPapers));\r\n        dispatch(actions.setPaperData(d));\r\n        dispatch(actions.setPaperChart(d));\r\n        console.log(data)\r\n       } })\r\n    // fetch to get sum of contacts for user----------------------\r\n    fetch('https://api.dev.leader.codes/blabla101/getContacts/?includesConversations=false', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiJzaW1kc01ycmNKZHBRZ3RhOGtnWHlRQmRERnkyIiwiZW1haWwiOiJjdG9AbGVhZGVyLmNvZGVzIiwiaWF0IjoxNjEwNDM3MDcxfQ.vn3nemrfKrW2TKQqwtkIoyaRZRjS8JBEhTtmIWzdc04\",\r\n        //     Authorization: jwt,\r\n      },\r\n    })\r\n      .then((data) => data.json())\r\n      .then((dataContact) => {\r\n        //all data for contact\r\n        let contactData = dataContact\r\n        //only sumContact\r\n        if(contactData!=null){\r\n          debugger\r\n        let sumContact = (dataContact.length)\r\n\r\n        dispatch(actions.setContactStatic(sumContact));\r\n        dispatch(actions.setContactData(contactData));\r\n        dispatch(actions.setContactChart(contactData));\r\n        console.log(contactData)\r\n      } })\r\n  }\r\n  return next(action)\r\n}","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\Redux\\reducers\\staticDetailsReducer.js",["120","121","122","123"],"import produce from 'immer';\r\nimport { createReducer } from \"./reducerUtils\";\r\nimport moment from 'moment';\r\n\r\nconst initialState = {\r\n    leaderStatic: { sumProjects: 0, sumTasks: 0, sumPapers: 0, sumContacts: 0 },\r\n    dataStatic: [],\r\n    sumStatic: { viewer: 0, contactOptions: 0, submitioms: 0 },\r\n    AllProject: [],\r\n    AllTask: [],\r\n    AllContact: [],\r\n    AllPapers: [],\r\n    isClicked: 0,\r\n    arrTime:['Day','Week','Month','Year'],\r\n    choose:'Day',\r\n    // SumAll:0,\r\n   \r\n\r\n    papers: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    projects: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    tasks: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    contacts: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n\r\n\r\n};\r\n\r\nconst staticData = {\r\n\r\n    //  setStaticData(state, action) {\r\n    //      \r\n    // //   state.sumStatic=action.payload.viewers.map((viewer) =>new Date(viewer.data))\r\n    //     state.dataStatic=action.payload;\r\n    //      \r\n    //     state.sumStatic.viewer=sumData(state.dataStatic.viewers);\r\n    //      \r\n    //     state.sumStatic.contactOptions=sumData(state.dataStatic.contactOptions);\r\n    //     state.sumStatic.submitioms=sumData(state.dataStatic.submitioms);\r\n    //      \r\n\r\n    // },\r\n    \r\n\r\n    setSumStatic(state, action) {\r\n        state.AllProject = (action.payload);\r\n        // state.sumStatic.contactOptions=sumData(action.payload.contactOptions);\r\n        // state.sumStatic.submitioms=sumData(action.payload.submitioms);  \r\n    },\r\n    setProjectStatic(state, action) {\r\n        state.leaderStatic.sumProjects = action.payload\r\n        // state.SumAll=state.leaderStatic.sumProjects\r\n    },\r\n    setProjectData(state, action) {\r\n\r\n        state.AllProject = action.payload\r\n    },\r\n    setTaskStatic(state, action) {\r\n        state.leaderStatic.sumTasks = action.payload\r\n        // state.SumAll=state.SumAll+state.leaderStatic.sumTasks\r\n\r\n    },\r\n    setTaskData(state, action) {\r\n\r\n        state.AllTask = action.payload\r\n    },\r\n    setTaskChart(state = initialState, action) {\r\n\r\n        let allData = action.payload\r\n        console.log(initialState.tasks)\r\n    \r\n        const arr = [...state.tasks];\r\n        for (let i = 0; i < 9; i++) {\r\n           \r\n\r\n            const date1 = allData[i].startDate.split(\"/\")\r\n            let date2 = date1[1]\r\n            if (date2[0] != 0) {\r\n                const x = (arr[date2]) + 1\r\n                arr[date2] = x;\r\n            }\r\n            else {\r\n                date2 = date2[1]\r\n                const x = (arr[date2]) + 1\r\n                arr[date2] = x;\r\n            }\r\n        }\r\n        state.tasks = [...arr];\r\n        console.log(state.tasks)\r\n    },\r\n    setProjectChart(state = initialState, action) {\r\n\r\n        let allData = action.payload\r\n        const arr = [...state.projects];\r\n        for (let i = 0; i < allData.length; i++) {\r\n\r\n            const date1 = allData[i].dueDate.split(\"/\")\r\n            let date2 = date1[1]\r\n\r\n            if (date2[0] != 0) {\r\n                const x = (arr[date2]) + 1\r\n                arr[date2] = x;\r\n            }\r\n            else {\r\n                date2 = date2[1]\r\n                const x = (arr[date2]) + 1\r\n                arr[date2] = x;\r\n            }\r\n        }\r\n        state.projects = [...arr];\r\n        console.log(state.projects)\r\n    },\r\n    setPaperChart(state = initialState, action) {\r\n       \r\n\r\n        let allData = action.payload\r\n        console.log(initialState.papers)\r\n        const arr = [...state.papers];\r\n        for (let i = 0; i < allData.length; i++) {\r\n\r\n            const date1 = allData[i].createdDate\r\n            let date11 = moment(date1).format(\"MM/DD/YYYY\").split(\"/\")\r\n            let date2 = date11[0]\r\n            if (date2[0] != 0) {\r\n                const x = (arr[date2]) + 1\r\n                arr[date2] = x;\r\n            }\r\n            else {\r\n                date2 = date2[1]\r\n                const x = (arr[date2]) + 1\r\n                arr[date2] = x;\r\n            }\r\n        }\r\n        state.papers = [...arr];\r\n    },\r\n\r\n    setContactChart(state = initialState, action) {\r\n\r\n        let allData = action.payload\r\n        console.log(initialState.contacts)\r\n        const arr = [...state.contacts];\r\n        for (let i = 0; i < allData.length; i++) {\r\n\r\n            const date1 = allData[i].createDateAndTime\r\n            let date11 = moment(date1).format(\"MM/DD/YYYY\").split(\"/\")\r\n            let date2 = date11[0]\r\n            if (date2[0] != 0) {\r\n                const x = (arr[date2]) + 1\r\n                arr[date2] = x;\r\n            }\r\n            else {\r\n                date2 = date2[1]\r\n                const x = (arr[date2]) + 1\r\n                arr[date2] = x;\r\n            }\r\n        }\r\n\r\n        state.contacts = [...arr];\r\n    },\r\n    setPaperStatic(state, action) {\r\n        state.leaderStatic.sumPapers = action.payload\r\n        // state.SumAll= state.SumAll+state.leaderStatic.sumPapers\r\n    },\r\n\r\n    setContactStatic(state, action) {\r\n        \"\"\r\n        state.leaderStatic.sumContacts = action.payload\r\n        // state.SumAll= state.SumAll+state.leaderStatic.sumContacts \r\n    //   console.log(state.SumAll)\r\n    },\r\n    setContactData(state, action) {\r\n\r\n        state.AllContact = action.payload\r\n\r\n    }, setPaperData(state, action) {\r\n\r\n        state.AllPapers = action.payload\r\n\r\n    },\r\n    ClickFilter(state, action) {\r\n        state.isClicked = action.payload\r\n    },\r\n    IsChooseNext(state= initialState, action){\r\n        let y=action.payload\r\n       state.choose =state.arrTime[y]\r\n      \r\n\r\n  },\r\n   IsChoosePrevious(state=initialState, action){\r\n    let y=action.payload\r\n    state.choose=state.arrTime[y]\r\n\r\n\r\n  }\r\n\r\n    // sumAll=(UpdatedData.papers+updatedData.contacts+updatedData.projects+updatedData.tasks)\r\n};\r\n\r\nexport default produce((state, action) => createReducer(state, action, staticData), initialState);","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\TotalChart.js",["124","125"],"import React from 'react';\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport default function ApexChart() {\r\n  \r\n    const UpdatedData = useSelector(state => state.staticDetailsReducer);\r\n    debugger\r\n    const  sumAll=(UpdatedData.leaderStatic.sumContacts+\r\n        UpdatedData.leaderStatic.sumPapers+\r\n        UpdatedData.leaderStatic.sumProjects+\r\n        UpdatedData.leaderStatic.sumTasks)\r\n    const state = {\r\n       \r\n        series: [UpdatedData.leaderStatic.sumContacts,\r\n        UpdatedData.leaderStatic.sumPapers,\r\n        UpdatedData.leaderStatic.sumProjects,\r\n        UpdatedData.leaderStatic.sumTasks],\r\n        options: {\r\n            chart: {\r\n                height: 350,\r\n                type: 'radialBar',\r\n            },\r\n            plotOptions: {\r\n                radialBar: {\r\n                    dataLabels: {\r\n                        name: {\r\n                            fontSize: '22px',\r\n                        },\r\n                        value: {\r\n                            fontSize: '16px',\r\n                        },\r\n                        \r\n                        value: {\r\n                            show: true,\r\n                            fontSize: '14px',\r\n                            fontFamily: undefined,\r\n                            fontWeight: 400,\r\n                            color: undefined,\r\n                            offsetY: 16,\r\n                            formatter: function (val) {\r\n                              return val \r\n                            }\r\n                          },\r\n                          total: {\r\n                            show: true,\r\n                            label: 'Total',\r\n                            formatter:function (w) {\r\n                                return w.globals.seriesTotals.reduce((a, b) => {\r\n                                  return a + b\r\n                                }, 0)\r\n                              }\r\n                            \r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            labels: ['contacts', 'papers', 'projects ', 'tasks'],\r\n        },\r\n\r\n\r\n    };\r\n\r\n    return (\r\n\r\n\r\n        <div className=\"col-md-2\" id=\"chart\">\r\n            <ReactApexChart options={state.options} series={state.series} type=\"radialBar\" height={270} width={270} />\r\n        </div>\r\n    )\r\n}","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\Fasion2.js",["126"],"import React from 'react';\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport Chart from \"react-apexcharts\";\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nexport default function ApexChart () {\r\n    \r\n    const UpdatedData = useSelector(state => state.staticDetailsReducer);\r\n        const state = {\r\n\r\n            series: [UpdatedData.leaderStatic.sumContacts,\r\n                UpdatedData.leaderStatic.sumPapers,\r\n                UpdatedData.leaderStatic.sumProjects,\r\n                UpdatedData.leaderStatic.sumTasks],\r\n               \r\n            options: {\r\n                chart: {\r\n                    width: 380,\r\n                    type: 'polarArea'\r\n                },\r\n                labels: ['contacts', 'papers', 'projects ', 'tasks'],\r\n                fill: {\r\n                    opacity: 1\r\n                },\r\n                stroke: {\r\n                    width: 1,\r\n                    colors: undefined\r\n                },\r\n                yaxis: {\r\n                    show: false\r\n                },\r\n                legend: {\r\n                    position: 'bottom'\r\n                },\r\n                colors: ['rgb(247, 181, 0)', 'rgb(1, 220, 209)', 'rgb(103, 114, 222)', 'rgb(253, 81, 219)'],\r\n                \r\n                // plotOptions: {\r\n                //     polarArea: {\r\n                //         rings: {\r\n                //             strokeWidth: 0\r\n                //         }\r\n                //     }\r\n                // },\r\n                // theme: {\r\n                //     monochrome: {\r\n                //         // enabled: true,\r\n                //         // shadeTo: 'light',\r\n                //         // shadeIntensity: 0.6\r\n                //     }\r\n                // }\r\n            },\r\n\r\n\r\n        };\r\n    \r\n\r\n\r\n\r\n   \r\n        return (\r\n\r\n\r\n            <div id=\"chart\">\r\n                <ReactApexChart options={state.options} series={state.series} type=\"polarArea\" width={380} />\r\n            </div>\r\n        )\r\n    }\r\n","C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\Redux\\reducers\\reducerUtils.js",[],["127","128"],"C:\\Users\\User\\Desktop\\Charts\\leaderstatic\\src\\components\\Time.js",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":6,"column":8,"nodeType":"135","messageId":"136","endLine":6,"endColumn":19},{"ruleId":"133","severity":1,"message":"137","line":7,"column":8,"nodeType":"135","messageId":"136","endLine":7,"endColumn":16},{"ruleId":"133","severity":1,"message":"138","line":8,"column":8,"nodeType":"135","messageId":"136","endLine":8,"endColumn":14},{"ruleId":"133","severity":1,"message":"139","line":9,"column":8,"nodeType":"135","messageId":"136","endLine":9,"endColumn":12},{"ruleId":"133","severity":1,"message":"140","line":11,"column":9,"nodeType":"135","messageId":"136","endLine":11,"endColumn":13},{"ruleId":"133","severity":1,"message":"141","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":26},{"ruleId":"133","severity":1,"message":"142","line":4,"column":10,"nodeType":"135","messageId":"136","endLine":4,"endColumn":17},{"ruleId":"133","severity":1,"message":"143","line":8,"column":8,"nodeType":"135","messageId":"136","endLine":8,"endColumn":14},{"ruleId":"133","severity":1,"message":"144","line":17,"column":18,"nodeType":"135","messageId":"136","endLine":17,"endColumn":25},{"ruleId":"133","severity":1,"message":"145","line":17,"column":27,"nodeType":"135","messageId":"136","endLine":17,"endColumn":38},{"ruleId":"133","severity":1,"message":"146","line":17,"column":40,"nodeType":"135","messageId":"136","endLine":17,"endColumn":48},{"ruleId":"133","severity":1,"message":"147","line":17,"column":50,"nodeType":"135","messageId":"136","endLine":17,"endColumn":53},{"ruleId":"133","severity":1,"message":"148","line":20,"column":8,"nodeType":"135","messageId":"136","endLine":20,"endColumn":18},{"ruleId":"133","severity":1,"message":"149","line":21,"column":10,"nodeType":"135","messageId":"136","endLine":21,"endColumn":23},{"ruleId":"133","severity":1,"message":"150","line":21,"column":25,"nodeType":"135","messageId":"136","endLine":21,"endColumn":39},{"ruleId":"133","severity":1,"message":"151","line":23,"column":10,"nodeType":"135","messageId":"136","endLine":23,"endColumn":17},{"ruleId":"152","severity":1,"message":"153","line":60,"column":15,"nodeType":"154","messageId":"155","endLine":60,"endColumn":17},{"ruleId":"152","severity":1,"message":"153","line":90,"column":15,"nodeType":"154","messageId":"155","endLine":90,"endColumn":17},{"ruleId":"152","severity":1,"message":"156","line":122,"column":34,"nodeType":"154","messageId":"155","endLine":122,"endColumn":36},{"ruleId":"152","severity":1,"message":"156","line":129,"column":33,"nodeType":"154","messageId":"155","endLine":129,"endColumn":35},{"ruleId":"152","severity":1,"message":"156","line":134,"column":34,"nodeType":"154","messageId":"155","endLine":134,"endColumn":36},{"ruleId":"152","severity":1,"message":"156","line":141,"column":31,"nodeType":"154","messageId":"155","endLine":141,"endColumn":33},{"ruleId":"157","severity":1,"message":"158","line":279,"column":41,"nodeType":"159","endLine":279,"endColumn":88},{"ruleId":"157","severity":1,"message":"158","line":301,"column":41,"nodeType":"159","endLine":301,"endColumn":88},{"ruleId":"157","severity":1,"message":"158","line":324,"column":41,"nodeType":"159","endLine":324,"endColumn":64},{"ruleId":"160","severity":1,"message":"161","line":334,"column":54,"nodeType":"162","endLine":334,"endColumn":78},{"ruleId":"157","severity":1,"message":"158","line":346,"column":41,"nodeType":"159","endLine":346,"endColumn":63},{"ruleId":"133","severity":1,"message":"163","line":11,"column":11,"nodeType":"135","messageId":"136","endLine":11,"endColumn":22},{"ruleId":"133","severity":1,"message":"164","line":2,"column":8,"nodeType":"135","messageId":"136","endLine":2,"endColumn":14},{"ruleId":"165","severity":1,"message":"166","line":83,"column":7,"nodeType":"167","messageId":"155","endLine":83,"endColumn":12},{"ruleId":"133","severity":1,"message":"168","line":6,"column":8,"nodeType":"135","messageId":"136","endLine":6,"endColumn":15},{"ruleId":"133","severity":1,"message":"169","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":26},{"ruleId":"133","severity":1,"message":"170","line":2,"column":8,"nodeType":"135","messageId":"136","endLine":2,"endColumn":22},{"ruleId":"133","severity":1,"message":"171","line":3,"column":8,"nodeType":"135","messageId":"136","endLine":3,"endColumn":13},{"ruleId":"133","severity":1,"message":"172","line":18,"column":11,"nodeType":"135","messageId":"136","endLine":18,"endColumn":16},{"ruleId":"133","severity":1,"message":"173","line":21,"column":9,"nodeType":"135","messageId":"136","endLine":21,"endColumn":12},{"ruleId":"152","severity":1,"message":"153","line":76,"column":26,"nodeType":"154","messageId":"155","endLine":76,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":98,"column":26,"nodeType":"154","messageId":"155","endLine":98,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":122,"column":26,"nodeType":"154","messageId":"155","endLine":122,"endColumn":28},{"ruleId":"152","severity":1,"message":"153","line":145,"column":26,"nodeType":"154","messageId":"155","endLine":145,"endColumn":28},{"ruleId":"133","severity":1,"message":"174","line":9,"column":12,"nodeType":"135","messageId":"136","endLine":9,"endColumn":18},{"ruleId":"165","severity":1,"message":"175","line":34,"column":25,"nodeType":"167","messageId":"155","endLine":34,"endColumn":30},{"ruleId":"133","severity":1,"message":"171","line":3,"column":8,"nodeType":"135","messageId":"136","endLine":3,"endColumn":13},{"ruleId":"129","replacedBy":"176"},{"ruleId":"131","replacedBy":"177"},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"no-unused-vars","'FusionChart' is defined but never used.","Identifier","unusedVar","'NewChart' is defined but never used.","'ChartT' is defined but never used.","'BarT' is defined but never used.","'Menu' is defined but never used.","'Component' is defined but never used.","'connect' is defined but never used.","'Button' is defined but never used.","'NavItem' is defined but never used.","'NavDropdown' is defined but never used.","'MenuItem' is defined but never used.","'Nav' is defined but never used.","'Pagination' is defined but never used.","'BsChevronLeft' is defined but never used.","'BsChevronRight' is defined but never used.","'indexOf' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'UpdatedData' is assigned a value but never used.","'moment' is defined but never used.","no-dupe-keys","Duplicate key 'xaxis'.","ObjectExpression","'Fasion2' is defined but never used.","'useEffect' is defined but never used.","'ReactApexChart' is defined but never used.","'Chart' is defined but never used.","'state' is assigned a value but never used.","'jwt' is assigned a value but never used.","'sumAll' is assigned a value but never used.","Duplicate key 'value'.",["178"],["179"],"no-global-assign","no-unsafe-negation"]